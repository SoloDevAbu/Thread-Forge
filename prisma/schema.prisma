// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId        String
  expires     DateTime
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  profile Profile?
  generations Generation[]
  preferences UserPreferences?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application models
model Profile {
  id        String   @id @default(cuid())
  userId    String   @unique
  email     String
  fullName  String?
  avatarUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Generation {
  id             String   @id @default(cuid())
  userId         String
  originalContent String
  contentType    String   @default("text")
  fileUrl        String?
  fileName       String?
  platforms      String[]
  createdAt      DateTime @default(now())

  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  generatedPosts GeneratedPost[]
}

model GeneratedPost {
  id            String   @id @default(cuid())
  generationId  String
  platform      String
  tone          String
  content       String
  hashtags      String[]
  characterCount Int     @default(0)
  createdAt     DateTime @default(now())

  generation Generation @relation(fields: [generationId], references: [id], onDelete: Cascade)
}

model UserPreferences {
  id             String   @id @default(cuid())
  userId         String   @unique
  defaultPlatforms String[]
  defaultTones   Json
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
