import { NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";
import prisma from "@/lib/prisma";
import { generateText } from "ai";
import { google } from "@ai-sdk/google";
import { GeneratedPost, Platform, Tone } from "@/lib/types/database";
import { PLATFORMS } from "@/lib/constants";
import { GoogleAIFileManager } from "@google/generative-ai/server";

interface GenerateRequest {
  content?: string;
  platforms: Platform[];
  pdfFile?: File;
  tones: Record<Platform, Tone>;
}

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);

    if (!session?.user?.id) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    const body: GenerateRequest = await request.json();
    const { content, platforms, tones, pdfFile } = body;

    if (!content || !platforms || platforms.length === 0) {
      return NextResponse.json(
        { error: "Missing required fields" },
        { status: 400 }
      );
    }

    const generation = await prisma.generation.create({
      data: {
        userId: session.user.id,
        originalContent: content,
        contentType: "text",
        platforms,
      },
    });

    let fileUri = null;
    if (pdfFile) {
      const fileManager = new GoogleAIFileManager(
        process.env.GOOGLE_GENERATIVE_AI_API_KEY as string
      );
      const buffer = await pdfFile.arrayBuffer();
      const geminiFile = await fileManager.uploadFile(Buffer.from(buffer), {
        mimeType: "application/pdf",
      });
      fileUri = geminiFile.file.uri;
    }

    const generatedPosts = [];
    for (const platform of platforms) {
      const tone = tones[platform];
      const platformInfo = PLATFORMS.find((p) => p.value === platform);
      if (!platformInfo) continue;

      const systemPrompt = createViralSystemPrompt(
        platform,
        tone,
        platformInfo.maxChars
      );

      const userContent = [
        { type: "text", text: content },
        ...(fileUri
          ? [{ type: "file", data: fileUri, mimeType: "application/pdf" }]
          : []),
      ];

      try {
        const { text } = await generateText({
          model: google("gemini-2.5-flash"),
          system: systemPrompt,
          temperature: 0.8,
          messages: [{ role: "user", content: userContent as any }],
        });
        console.log("text generated by AI", text);
        const posts: GeneratedPost[] = JSON.parse(text);
        console.log("posts generated by AI", posts);

        for (const post of posts) {
          const dbPost = await prisma.generatedPost.create({
            data: {
              generationId: generation.id,
              platform,
              tone,
              content: post.content,
              hashtags: post.hashtags,
            },
          });
          generatedPosts.push(dbPost);
        }
      } catch (error) {
        console.error(`Error generating for ${platform}:`, error);
      }
    }

    return NextResponse.json({
      generationId: generation.id,
      posts: generatedPosts,
    });
  } catch (error) {
    console.error("Generation error:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}

// function createPrompt(userContent: { type: string; text?: string; data?: string; mimeType?: string }[], platform: Platform, tone: Tone, maxChars: number): string {
//   const platformGuidelines = {
//     twitter: 'Keep it concise, punchy, and engaging. Use line breaks for readability. Twitter/X users value brevity and wit.',
//     linkedin: 'Professional yet approachable. Use proper formatting with line breaks. Focus on insights and value.',
//     reddit: 'Conversational and authentic. Redditors value genuine, detailed content. Avoid corporate speak.',
//   }

//   const toneGuidelines = {
//     educational: 'Focus on teaching and providing valuable insights. Use clear explanations.',
//     professional: 'Maintain a polished, business-appropriate tone. Be authoritative yet accessible.',
//     funny: 'Inject humor and wit. Make it entertaining while delivering the message.',
//     inspirational: 'Be motivating and uplifting. Use powerful, encouraging language.',
//     controversial: 'Take a bold stance. Challenge conventional thinking. Be thought-provoking.',
//     casual: 'Write like talking to a friend. Be relaxed and conversational.',
//   }

//   return `Transform the following content into a viral ${platform} post with a ${tone} tone.

// RESPONSE_REQUIREMENTS:
// - platform: ${platform.toLowerCase()}
// - tone: ${tone} (${toneGuidelines[tone]})
// - platform guidelines: ${platformGuidelines[platform]}
// - maximum ${maxChars} characters
// - make it engaging, shareable, and optimized for the platform
// - use emojis strategically if appropriate for the platform and tone
// - format with proper line breaks for readability
// - return only the post content, no other text
// - return the response in the following format:

// RESPONSE_FORMAT: {
//   content: string,
//   platform: ${platform.toLowerCase()},
//   hashtags: string[],
//   tone: ${tone},
// }

// EXAMPLE_RESPONSE:
// - twitter:
// {
//   content: "This is a sample post",
//   platform: "twitter",
//   hashtags: ["sample", "post"],
//   tone: "professional",
// }
// - linkedin:
// {
//   content: "This is a sample post",
//   platform: "linkedin",
//   hashtags: ["sample", "post"],
//   tone: "professional",
// }
// - reddit:
// {
//   content: "This is a sample post",
//   platform: "reddit",
//   hashtags: ["sample", "post"],
//   tone: "professional",
// }
// `
// }

function createViralSystemPrompt(
  platform: Platform,
  tone: Tone,
  maxChars: number
) {
  return `
You are an expert viral post writer with 10+ years experience.
Your job is to transform provided text into exactly THREE highly viral social media posts for the "${platform}" platform in "${tone}" tone.
Each post must:
- Follow the most current best practices for ${platform}: length limits, formatting, use of line breaks, hashtags, and engagement tactics.
- Strictly match the "${tone}" tone:
    - Educational: Teach, give insights, break down info clearly.
    - Professional: Be confident, authoritative, actionable.
    - Funny: Use clever humor, playfulness, memes, light-hearted language.
    - Inspirational: Motivate, use energetic and uplifting language.
    - Casual: Light, conversational, friendly, relaxed.
- Be optimized for maximum shares, likes, and platform-specific virality.
- Use emojis and trending hashtags only if relevant.
- Each post must be in this exact response format:

RESPONSE_FORMAT:
[
  {
    "content": "string, best viral post text, under ${maxChars} characters",
    "platform": "${platform}",
    "tone": "${tone}",
    "hashtags": ["trending", "tags", "etc"]
  },
  {...}, {...}
]

Do not include any other text, explanations, intros or outros. Deliver exactly 3 posts and nothing else and Must follow the RESPONSE_FORMAT only.
`;
}
